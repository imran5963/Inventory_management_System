import { Component } from '@angular/core';
import { InvoiceService } from '../invoice.service';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { Customer, Items } from '../customer';

@Component({
  selector: 'app-invoive',
  templateUrl: './invoive.component.html',
  styleUrls: ['./invoive.component.css'],
})
export class InvoiveComponent {
  constructor(
    private invService: InvoiceService,
    private modalservice: NgbModal
  ) {}

  invoiceDate: any;
  currentQuantity: number = 1;
  currentUnitPrice: any;
  taxRate: number = 0.05;
  generatedinvoicenumber: string = '';
  selectedCustomerName: string = '';

  generatedRandomInvoiceNumber() {
    const autoGeneratedNumber = Math.floor(Math.random() * 1000);
    this.generatedinvoicenumber = `INV${autoGeneratedNumber}`;
  }

  onCustomerSelect(customerName: string) {
    this.selectedCustomerName = customerName;
  }

  customers: Customer[] = [];
  item: Items[] = [];
  selectedItemName: string = '';
  // selectedItemPrice: number[] = [];
  // selectedPrice: number | null = null;
  // invoiceItems: any[] = [];
  // taxPercentage: number = 0.1;
  // itemQuantity: number = 1;
  showInvoiceTable: boolean = false;
  currentDate: Date = new Date();

  rows: any[] = [];

  addRow() {
    const newRow = { id: this.rows.length + 1, name: this.selectedItemName };
    this.rows.push(newRow);
  }

  deleteRow(row: any) {
    const rowIndex = this.rows.indexOf(row);
    if (rowIndex !== -1) {
      this.rows.splice(rowIndex, 1);
    }
  }

  ngOnInit(): void {
    const currentDate = new Date();
    this.invoiceDate = currentDate.toISOString().substr(0, 10);
    this.invService.getAllCustomer().subscribe(
      (customers) => (this.customers = customers),
      (error) => console.error('Error fetching customers:', error)
    );

    this.invService.getAllItem().subscribe(
      (items) => (this.item = items),
      (error) => console.error('Error fetching items:', error)
    );

    setInterval(() => {});
    this.generatedRandomInvoiceNumber();
    this.currentDate.toISOString().substr(0, 10);
  }
  onItemSelect(selectedItemName: string) {
    const selectedItem = this.item.find(
      (item) => item.name === selectedItemName
    );
    // if (selectedItem) {
    //   // this.selectedItemPrice = selectedItem.prices;
    //   this.selectedItemName = selectedItem.name;
    // }
  }

  
  // onPriceSelect(selectedIndex: number) {
  //   this.selectedPrice = this.selectedItemPrice[selectedIndex];
  // }

  onSubmit(row: any) {
    // console.log("REQUESTTTTTT",row)
    const invoiceData = {
      customerName: this.selectedCustomerName,
      invoiceNumber: this.generatedinvoicenumber,
      curDate: this.invoiceDate,
      item: this.rows.map((row) => ({
        itemName: row.name,
        quantity: row.currentQuantity,
        price: row.currentUnitPrice,
        subtotal: this.updateTotalAmount(row),
        gstAmount: this.calculateTaxAmount(row),
        totalAmount: this.calculateTotalAmountWithTax(row),
      })),
    };
    // console.log("INVOICEEEEEEEEEE",invoiceData);
    this.invService.saveInvoiceData(invoiceData).subscribe(
      (response) => {
        console.log('Response from server:', response);
      },
      (error) => {
        console.error('Error saving invoice data', error);
      }
    );
    location.reload();
  }

  updateTotalAmount(row: any): number {
    return row.currentQuantity * row.currentUnitPrice;
  }
  calculateTaxAmount(row: any): number {
    return this.updateTotalAmount(row) * this.taxRate;
  }
  calculateTotalAmountWithTax(row: any): number {
    return this.updateTotalAmount(row) + this.calculateTaxAmount(row);
  }
}
// addItemToInvoice(quantity: number) {
//   if (
//     this.selectedCustomerName &&
//     this.selectedItemName &&
//     this.selectedPrice !== null
//   ) {
//     const newItem = {
//       customerName: this.selectedCustomerName,
//       itemName: this.selectedItemName,
//       unitPrice: this.selectedPrice,
//       quantity: quantity,
//     };
//     this.invoiceItems.push(newItem);
//     //  item details after adding to the invoice
//     this.selectedItemName = '';
//     this.selectedItemPrice = [];
//     this.selectedPrice = null;
//     //     this.showInvoiceTable = true;
//   }
// }
// // subtotal
// calculateSubTotal(): number {
//   let subTotal = 0;
//   for (const item of this.invoiceItems) {
//     const itemTotal = item.unitPrice * item.quantity;
//     subTotal += itemTotal;
//   }
//   return subTotal;
// }

// Calculate Tax Amount
// calculateTaxAmount(): number {
//   const subTotal = this.calculateSubTotal();
//   const taxAmount = subTotal * this.taxRate;
//   return taxAmount;
// }
// //  calculate the total amount including tax
// calculateTotalAmount() {
//   let subTotal = 0;
//   for (const item of this.invoiceItems) {
//     const itemTotal = item.unitPrice * item.quantity;
//     subTotal += itemTotal;
//   }
//   const taxAmount = subTotal * this.taxRate;
//   return subTotal + taxAmount;
// }

// //  create the invoice
// createInvoice() {
//   const totalAmount = this.calculateTotalAmount();
//   const invoice = {
//     customerName: this.selectedCustomerName,
//     items: this.invoiceItems,
//     totalAmount: totalAmount,
//   };
// }
